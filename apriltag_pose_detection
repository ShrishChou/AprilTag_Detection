import robotpy_apriltag
import cv2
import math

cap = cv2.VideoCapture(1)
detector=robotpy_apriltag.AprilTagDetector()
works=detector.addFamily("tag36h11")
focal_length_mm = 2.8  # Example value in mm, replace with actual
sensor_width_mm = 5.376  # Example sensor width in mm, replace with actual
sensor_height_mm = 4.32  # Example sensor height in mm, replace with actual
resolution_width_px = 1920  # Replace with actual resolution width
resolution_height_px = 1080  # Replace with actual resolution height

focal_length_x_px = 1222.696171025563
focal_length_y_px = 1212.1695904263745
focal_center_x = 883.3558187170079
focal_center_y = 542.76052956764
print(focal_center_x,focal_center_y,focal_length_x_px,focal_length_y_px)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    gray=cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    tags=detector.detect(gray)
    # Inititalize estimator  (Read documentation for Config parameters which differ based on camera) 
    pose_estimator=robotpy_apriltag.AprilTagPoseEstimator(robotpy_apriltag.AprilTagPoseEstimator.Config(0.053,
                                                                                                        focal_length_x_px,
                                                                                                        focal_length_y_px,
                                                                                                        focal_center_x,
                                                                                                        focal_center_y))
    # Loop through each tag
    for tag in tags:

        # Mark corners
        corners=tag.getCorners((1,2,3,4,5,6,7,8))
        for i in range(3):
            pt1=(int(corners[2*i]),int(corners[2*i+1]))
            pt2=(int(corners[2*(i+1)]),int(corners[2*(i+1)+1]))
            cv2.line(frame, pt1, pt2, (0, 255, 0), 2)
        pt1 = (int(corners[0]),int(corners[1]))
        pt4 = (int(corners[6]),int(corners[7]))
        cv2.line(frame, pt1, pt4, (0, 255, 0), 2)

        # plot center
        center=tag.getCenter()
        plotcenter=(int(center.x),int(center.y))
        cv2.circle(frame, plotcenter, 5, (0, 0, 255), -1)
        
        # Estimate tag pose
        pose=pose_estimator.estimate(tag)
        coor2=(pose.translation().X(),pose.translation().Y(),pose.translation().Z())
        coor=tuple()
        for c in range(3):
            coor=coor+(coor2[c]*39.3701,)
        rotate=(math.degrees(pose.rotation().X()),
                math.degrees(pose.rotation().Y()),
                math.degrees(pose.rotation().Z()))
        print("translate ",coor)
        print("rotate", rotate)
        # For viewing on screen round each to 3 decimal pl  aces
        output_coor= tuple(round(x, 3) for x in coor)
        output_rotate= tuple(round(x, 3) for x in rotate)
        cv2.putText ( frame, str(output_coor)+str(output_rotate),(plotcenter[0] , plotcenter[1] -50),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
        
    # Display the resulting frame
    cv2.imshow('AprilTag Detection', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# When everything is done, release the capture and close windows
cap.release()
cv2.destroyAllWindows()